/****************************************************************
	Description:
	> 图像算术
	> 图像以矩阵形式存储，因此可以做加减乘除运算
	> 在此，我们将两个图像相加结合

*****************************************************************/

#include <cv.h>
#include <highgui.h>

//#include<opencv2/core/core.hpp>
//#include<opencv2/imgproc/imgproc.hpp>
//#include<opencv2/highgui/highgui.hpp>

using namespace cv;  // 避免每次都要输入cv::，因此在程序开始加入本语句

// {{{ colorReduce
/*void me_sharpen( Mat &image, Mat &result )
{
	result = image.clone();//为避免对原图像进行更改，因此先克隆图像，以下的操作也是对克隆得到的图像
//	result.create(image.size(),image.type());	
	for( int j = 1; j!= image.rows-1; j++ )  // 
	{
		const uchar* previous = image.ptr<const uchar>(j-1);
		const uchar* current = image.ptr<const uchar>(j);
		const uchar* next = image.ptr<const uchar>(j+1);
		uchar* output = result.ptr<uchar>(j);
		for(int i=1; i != image.cols-1; i++)
		{
			*output++ = cv::saturate_cast<uchar>(5*current[i]-current[i-1]-current[i+1]-previous[i]-next[i]);
		}
	}
	result.row(0).setTo(cv::Scalar(0));
	result.row(result.rows-1).setTo(cv::Scalar(0));
	result.col(0).setTo(cv::Scalar(0));
	result.col(result.cols-1).setTo(cv::Scalar(0));
}*/
// }}}

int main( int argc, char** argv )
{
	char* imageName1 = argv[1];
	char* imageName2 = argv[2];

	Mat image1;
	Mat image2;
	Mat add;

	image1 = imread( imageName1 );  //载入图片
	image2 = imread( imageName2 );  //载入图片

	if( argc != 3 )//参数输入错误提示
	{
		printf( "add usage: ./executable_file_name Image1_fullname Image2_fullname \n ");
		return -1;
	}
	else if( !(image1.data || image2.data) )//载入图片失败
	{
		printf(" No image data. \n ");
		return -1;
	}
	
	addWeighted( image1, 0.5, image2, 0.5, 0, add );         // 1: input image
						 // 2: output image	
	std::cout << "rows: " << add.rows << "cols: " << add.cols << "\n" ;
	imwrite( "./add_image.png", add );
	// imwrite( "destination_direction/Name_gray_image", gray_image)
	// -> 1st parameter: my destination_direction/Name_gray_image, as which I want to save the gray_image 
	// -> 2nd parameter: the converted image, gray_image

	namedWindow( imageName1, CV_WINDOW_AUTOSIZE );// Create a window for display
	namedWindow( imageName2, CV_WINDOW_AUTOSIZE );// Create a window for display
	namedWindow( "add_image", CV_WINDOW_AUTOSIZE );

	imshow( imageName1, image1 );// Show our image inside it
	imshow( imageName2, image2 );// Show our image inside it
	imshow( "add_image", add );

	waitKey(0); // Wait for a keystroke in the window
	//In order to display the window until the user presses a key, we use the waitkey function whose the only parameter is how long should it wait for a user input.
	// 0 : forever
	// About waitKey() ?????

	return 0;
}
